import /init.recovery.ldconfig.rc
import /init.recovery.${ro.hardware}.rc
#import /init.recovery.usb.rc
import /init.recovery.service.rc
import /init.recovery.hlthchrg.rc

on early-init
    # Set the security context of /postinstall if present.
    restorecon /postinstall

    mount cgroup none /acct cpuacct
    mkdir /acct/uid
    start ueventd

    setprop sys.usb.configfs 1

on init
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard
    export PATH /sbin:/system/bin
    export LD_LIBRARY_PATH /system/lib64

    symlink /proc/self/fd/0 /dev/stdin
    symlink /proc/self/fd/1 /dev/stdout
    symlink /proc/self/fd/2 /dev/stderr

    symlink /system/bin /bin
    symlink /system/etc /etc

    mkdir /sdcard
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /sideload
    mkdir /mnt/system
    mount tmpfs tmpfs /tmp
    # unlink /efs > /mnt/vendor/efs
    rm /efs
    mkdir /efs
    mkdir /sec_efs

    chown root shell /tmp
    chmod 0775 /tmp

    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/vm/max_map_count 1000000

on boot
    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

# Load properties from /system/ + /factory after fs mount.
on load_system_props_action
    load_system_props

on firmware_mounts_complete
   rm /dev/.booting

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

    # Load properties from /system/ + /factory after fs mount. Place
    # this in another action so that the load will be scheduled after the prior
    # issued fs triggers have completed.
    trigger load_system_props_action

    # Remove a file to wake up anything waiting for firmware
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot

service ueventd /system/bin/ueventd
    critical
    seclabel u:r:ueventd:s0

#service charger /system/bin/charger
#    critical
#    seclabel u:r:charger:s0

#service recovery /system/bin/recovery
#    socket recovery stream 422 system system
#    seclabel u:r:recovery:s0

service adbd /system/bin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket adbd stream 660 system system
    seclabel u:r:adbd:s0

service fastbootd /system/bin/fastbootd
    disabled
    group system
    seclabel u:r:fastbootd:s0

# Restart adbd so it can run as root
on property:service.adb.root=1
    restart adbd

# Always start adbd on userdebug and eng builds
on fs && property:ro.debuggable=1
    setprop sys.usb.config adb

on fs && property:sys.usb.configfs=1
    mount configfs none /config
    mkdir /config/usb_gadget/g1 0770 shell shell
    write /config/usb_gadget/g1/bcdUSB 0x0200
    mkdir /config/usb_gadget/g1/strings/0x409
    mkdir /config/usb_gadget/g1/configs/c.1
    mkdir /config/usb_gadget/g1/configs/c.1/strings/0x409 0770 shell shell
    mkdir /config/usb_gadget/g1/functions/ffs.adb 0770 shell shell
    mkdir /config/usb_gadget/g1/functions/ffs.fastboot 0770 shell shell
    write /config/usb_gadget/g1/strings/0x409/serialnumber ${ro.serialno}
    write /config/usb_gadget/g1/strings/0x409/manufacturer "SAMSUNG"
    write /config/usb_gadget/g1/strings/0x409/product "SAMSUNG_Android"
    write /config/usb_gadget/g1/configs/c.1/strings/0x409/configuration "Conf 1"
    write /config/usb_gadget/g1/configs/c.1/MaxPower 0x3f
    mkdir /config/usb_gadget/g1/configs/c.1 0777 shell shell
    symlink /config/usb_gadget/g1/configs/c.1 /config/usb_gadget/g1/os_desc/c.1

on fs
    mkdir /dev/usb-ffs 0775 shell shell
    mkdir /dev/usb-ffs/adb 0770 shell shell
    mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000
    mkdir /dev/usb-ffs/fastboot 0770 system system
    mount functionfs fastboot /dev/usb-ffs/fastboot rmode=0770,fmode=0660,uid=1000,gid=1000

on property:sys.usb.config=adb
    start adbd

on property:sys.usb.config=fastboot
    start fastbootd

# Configfs triggers
on property:sys.usb.config=none && property:sys.usb.configfs=1
    write /config/usb_gadget/g1/UDC "none"
    stop adbd
    stop fastbootd
    setprop sys.usb.ffs.ready 0
    write /config/usb_gadget/g1/bDeviceClass 0
    write /config/usb_gadget/g1/bDeviceSubClass 0
    write /config/usb_gadget/g1/bDeviceProtocol 0
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=sideload && property:sys.usb.ffs.ready=1 && property:sys.usb.configfs=1
    write /config/usb_gadget/g1/configs/c.1/strings/0x409/configuration "adb"
    rm /config/usb_gadget/g1/configs/c.1/f1
    rm /config/usb_gadget/g1/configs/c.1/f2
    write /config/usb_gadget/g1/idVendor 0x04E8
    write /config/usb_gadget/g1/idProduct 0x6860
    write /sys/class/android_usb/android0/f_ffs/aliases adb
    symlink /config/usb_gadget/g1/functions/ffs.adb /config/usb_gadget/g1/configs/c.1/f1
    write /config/usb_gadget/g1/UDC "a600000.dwc3"
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=adb && property:sys.usb.ffs.ready=1 && property:sys.usb.configfs=1
    write /config/usb_gadget/g1/configs/c.1/strings/0x409/configuration "adb"
    rm /config/usb_gadget/g1/configs/c.1/f1
    rm /config/usb_gadget/g1/configs/c.1/f2
    write /config/usb_gadget/g1/idVendor 0x04E8
    write /config/usb_gadget/g1/idProduct 0x6860
    write /sys/class/android_usb/android0/f_ffs/aliases adb
    symlink /config/usb_gadget/g1/functions/ffs.adb /config/usb_gadget/g1/configs/c.1/f1
    write /config/usb_gadget/g1/UDC "a600000.dwc3"
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=fastboot && property:sys.usb.ffs.ready=1 && property:sys.usb.configfs=1
    write /config/usb_gadget/g1/configs/c.1/strings/0x409/configuration "fastboot"
    rm /config/usb_gadget/g1/configs/c.1/f1
    rm /config/usb_gadget/g1/configs/c.1/f2
    write /config/usb_gadget/g1/idVendor 0x18d1
    write /config/usb_gadget/g1/idProduct 0xd001
    write /sys/class/android_usb/android0/f_ffs/aliases fastboot
    symlink /config/usb_gadget/g1/functions/ffs.fastboot /config/usb_gadget/g1/configs/c.1/f1
    write /config/usb_gadget/g1/UDC "a600000.dwc3"
    setprop sys.usb.state ${sys.usb.config}

#on property:sys.usb.ffs.ready=1
#    write /sys/class/android_usb/android0/enable 0
#    write /config/usb_gadget/g1/idVendor 0x04E8
#   write /config/usb_gadget/g1/idProduct 0x6860
#   write /sys/class/android_usb/android0/f_ffs/aliases adb
#   write /sys/class/android_usb/android0/functions adb
#   write /config/usb_gadget/g1/UDC ${sys.usb.controller}
#   write /sys/class/android_usb/android0/enable 1

# esecomm tlc for proxy mode
#service esecomm /system/bin/tlc_server ESECOMM
#    user system
#    group system
#    disabled
#
#on property:security.ucm_ese_applet_installed=1
#    start esecomm
#    setprop security.ucm_ese_applet_installed 0
